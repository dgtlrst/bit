// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `clone`, `clone`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `into`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SerialPortInfo>>
abstract class SerialPortInfo implements RustOpaqueInterface {
  DataBits get dataBits;

  FlowControl get flowControl;

  String get name;

  Parity get parity;

  int get speed;

  StopBits get stopBits;

  set dataBits(DataBits dataBits);

  set flowControl(FlowControl flowControl);

  set name(String name);

  set parity(Parity parity);

  set speed(int speed);

  set stopBits(StopBits stopBits);

  static SerialPortInfo? fromJson({required String json}) =>
      RustLib.instance.api.crateApiSerialSerialPortInfoFromJson(json: json);

  factory SerialPortInfo(
          {required String name,
          required int speed,
          required DataBits dataBits,
          required Parity parity,
          required StopBits stopBits,
          required FlowControl flowControl}) =>
      RustLib.instance.api.crateApiSerialSerialPortInfoNew(
          name: name,
          speed: speed,
          dataBits: dataBits,
          parity: parity,
          stopBits: stopBits,
          flowControl: flowControl);

  String? toJson();
}

enum DataBits {
  five,
  six,
  seven,
  eight,
  ;

  static DataBits from({required DataBits dataBits}) =>
      RustLib.instance.api.crateApiSerialDataBitsFrom(dataBits: dataBits);
}

enum FlowControl {
  none,
  software,
  hardware,
  ;

  static FlowControl from({required FlowControl flowControl}) =>
      RustLib.instance.api
          .crateApiSerialFlowControlFrom(flowControl: flowControl);
}

enum Parity {
  none,
  odd,
  even,
  ;

  static Parity from({required Parity parity}) =>
      RustLib.instance.api.crateApiSerialParityFrom(parity: parity);
}

enum StopBits {
  one,
  two,
  ;

  static StopBits from({required StopBits stopBits}) =>
      RustLib.instance.api.crateApiSerialStopBitsFrom(stopBits: stopBits);
}
